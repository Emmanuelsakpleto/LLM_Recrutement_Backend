#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os

# Ajouter le chemin du projet
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Candidate

def update_candidate_statuses():
    """Met Ã  jour les statuts des candidats existants basÃ©s sur leurs scores"""
    
    app = create_app()
    
    with app.app_context():
        # RÃ©cupÃ©rer tous les candidats avec un score prÃ©dictif final
        candidates = Candidate.query.filter(Candidate.final_predictive_score.isnot(None)).all()
        
        print(f"ğŸ”„ Mise Ã  jour de {len(candidates)} candidats...")
        
        for candidate in candidates:
            old_status = candidate.status
            final_score = candidate.final_predictive_score
            
            # DÃ©terminer le nouveau statut
            if final_score >= 80:  # Excellent
                new_status = "RecommandÃ©"
            elif final_score >= 60:  # Bon
                new_status = "En Ã©valuation"
            else:  # Ã€ revoir
                new_status = "Ã€ revoir"
            
            # Mettre Ã  jour le statut
            candidate.status = new_status
            
            print(f"ğŸ‘¤ {candidate.name}")
            print(f"   ğŸ“ˆ Score: {final_score:.1f}%")
            print(f"   ğŸ“Œ Statut: '{old_status}' â†’ '{new_status}'")
            print()
        
        # Sauvegarder les changements
        db.session.commit()
        print("âœ… Statuts mis Ã  jour avec succÃ¨s!")
        
        # VÃ©rification
        print("\nğŸ“Š RÃ©sumÃ© aprÃ¨s mise Ã  jour:")
        statuses = {}
        for candidate in candidates:
            status = candidate.status
            statuses[status] = statuses.get(status, 0) + 1
        
        for status, count in statuses.items():
            print(f"   â€¢ {status}: {count} candidat(s)")

if __name__ == "__main__":
    update_candidate_statuses()
